---
- name: "Check nvim installed"
  ansible.builtin.stat:
    path: /usr/local/bin/nvim-{{ nvim.version }}
  register: "check_nvim"
  changed_when: "not check_nvim.stat.exists"

# I don't want to deal with FUSE (especially in a container), so we're going to
# just grab the archive and unpack it (instead of using the .appimage).
- name: "Download nvim"
  ansible.builtin.get_url:
    url: "https://github.com/neovim/neovim/releases/download/{{ nvim.version }}/nvim-linux64.tar.gz"
    dest: "/tmp/nvim-linux64.tar.gz"
    mode: "0644"
  become: true
  become_user: root
  when: "not check_nvim.stat.exists"

- name: "Extract nvim"
  ansible.builtin.unarchive:
    src: "/tmp/nvim-linux64.tar.gz"
    dest: "/tmp"
    remote_src: true
  become: true
  become_user: root
  when: "not check_nvim.stat.exists"

- name: Install desired nvim
  ansible.builtin.command:
    cmd: "mv /tmp/nvim-linux64 /usr/local/bin/nvim-{{ nvim.version }}"
    creates: "/usr/local/bin/nvim-{{ nvim.version }}"
  become: true
  become_user: root

# This is going to have the effect of leaving old versions around, but will at
# least allow for upgrading nvim on all machines in one pass. We _could_ maybe
# remove existing directories matching a particular pattern first, I suppose.
- name: Link nvim
  ansible.builtin.file:
    src: "/usr/local/bin/nvim-{{ nvim.version }}/bin/nvim"
    dest: /usr/local/bin/nvim
    owner: root
    group: root
    state: link
  become: true
  become_user: root

# because we're going to change the url, we don't want to builtin git module to
# attempt to pull with the https url
- name: "Check nvim config present"
  ansible.builtin.stat:
    path: "{{ dev_home }}/.config/nvim"
  register: "check_nvim_config"
  changed_when: "not check_nvim_config.stat.exists"

- name: Install nvim configs
  ansible.builtin.git:
    repo: "{{ nvim_config.repo.https_url }}"
    dest: "{{ dev_home }}/.config/nvim"
    version: "{{ nvim_config.version }}"
  when: not check_nvim_config.stat.exists

- name: Change nvim config origin url  # noqa: command-instead-of-module command-instead-of-shell
  ansible.builtin.shell:
    cmd: git remote set-url origin {{ nvim_config.repo.ssh_url }}
    chdir: "{{ dev_home }}/.config/nvim"
  changed_when: true
  when: "not check_nvim_config.stat.exists"

- name: Make plugged dir
  ansible.builtin.file:
    dest: "{{ dev_home }}/.local/share/nvim/site/autoload"
    state: directory
    owner: "{{ dev_user }}"
    group: "{{ dev_user }}"
    mode: "0775"

- name: "Download vim-plug"
  ansible.builtin.get_url:
    url: "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
    dest: "{{ dev_home }}/.local/share/nvim/site/autoload/plug.vim"
    mode: "0644"

- name: "Check neovim venv present"
  ansible.builtin.stat:
    path: "{{ dev_home }}/.pyenv/versions/{{ pyenv_global_active }}/envs/neovim"
  register: "check_neovim_venv"
  changed_when: "not check_neovim_venv.stat.exists"

- name: "Create neovim venv"
  ansible.builtin.shell: >-
    {{ pyenv_bin }} virtualenv neovim &&
    {{ pyenv_bin }} rehash
  when: "not check_neovim_venv.stat.exists"
  changed_when: true

- name: "Install neovim python package"  # noqa: command-instead-of-shell
  ansible.builtin.shell: >-
    {{ dev_home }}/.pyenv/versions/{{ pyenv_global_active }}/envs/neovim/bin/pip install pynvim
  when: "not check_neovim_venv.stat.exists"
  changed_when: true

- name: "Install vim plugins"  # noqa: command-instead-of-shell
  ansible.builtin.shell: >-
    nvim -es -u {{ dev_home }}/.config/nvim/lua/plugin_init.lua -i NONE -c "PlugInstall" -c "qa"
  changed_when: true
  when: not check_nvim_config.stat.exists
